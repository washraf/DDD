// <auto-generated />
using System;
using Common.BaseClasses.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Common.BaseClasses.Migrations
{
    [DbContext(typeof(FullContext))]
    [Migration("20200515090406_start")]
    partial class start
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Common.BaseClasses.Model.CenterEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Agenda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.ToTable("CenterEvents");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseDays")
                        .HasColumnType("int");

                    b.Property<string>("CourseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.CourseIntake", b =>
                {
                    b.Property<int>("IntakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassDays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventLocation")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ToughtCourseCourseId")
                        .HasColumnType("int");

                    b.HasKey("IntakeId");

                    b.HasIndex("ToughtCourseCourseId");

                    b.ToTable("Intakes");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.Image", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ImageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Location")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LessonDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MainCourseCourseId")
                        .HasColumnType("int");

                    b.HasKey("LessonId");

                    b.HasIndex("MainCourseCourseId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.StudentSubcription", b =>
                {
                    b.Property<int>("IntakeId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseScoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("Payed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StudentEvaluationId")
                        .HasColumnType("int");

                    b.HasKey("IntakeId", "StudentId");

                    b.HasIndex("CourseScoreId");

                    b.HasIndex("StudentEvaluationId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentSubcriptions");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.Teaching", b =>
                {
                    b.Property<int>("IntakeId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorCurrentRole")
                        .HasColumnType("int");

                    b.Property<decimal>("ReceivedPayment")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IntakeId", "InstructorId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Teachings");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.ValueObjects.CourseEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterRating")
                        .HasColumnType("int");

                    b.Property<int>("ContentRating")
                        .HasColumnType("int");

                    b.Property<int>("InstructorRating")
                        .HasColumnType("int");

                    b.Property<int>("ToolsRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CourseEvaluation");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.ValueObjects.StudentEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Assignments")
                        .HasColumnType("int");

                    b.Property<int>("Attendence")
                        .HasColumnType("int");

                    b.Property<int>("CourseWork")
                        .HasColumnType("int");

                    b.Property<int>("GraduationProject")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StudentEvaluation");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.Employee", b =>
                {
                    b.HasBaseType("Common.BaseClasses.Model.User");

                    b.Property<decimal>("FixedSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MainDepartmentDepartmentId")
                        .HasColumnType("int");

                    b.HasIndex("MainDepartmentDepartmentId");

                    b.ToTable("Employee");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.Student", b =>
                {
                    b.HasBaseType("Common.BaseClasses.Model.User");

                    b.ToTable("Student");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.Instructor", b =>
                {
                    b.HasBaseType("Common.BaseClasses.Model.Employee");

                    b.Property<int>("HourRate")
                        .HasColumnType("int");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Instructor");

                    b.HasDiscriminator().HasValue("Instructor");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.CourseIntake", b =>
                {
                    b.HasOne("Common.BaseClasses.Model.Course", "ToughtCourse")
                        .WithMany("Intakes")
                        .HasForeignKey("ToughtCourseCourseId");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.Image", b =>
                {
                    b.HasOne("Common.BaseClasses.Model.CenterEvent", "Event")
                        .WithMany("Images")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.BaseClasses.Model.Lesson", b =>
                {
                    b.HasOne("Common.BaseClasses.Model.Course", "MainCourse")
                        .WithMany("Lessons")
                        .HasForeignKey("MainCourseCourseId");
                });

            modelBuilder.Entity("Common.BaseClasses.Model.StudentSubcription", b =>
                {
                    b.HasOne("Common.BaseClasses.Model.ValueObjects.StudentEvaluation", "CourseScore")
                        .WithMany()
                        .HasForeignKey("CourseScoreId");

                    b.HasOne("Common.BaseClasses.Model.CourseIntake", "Intake")
                        .WithMany("Subcriptions")
                        .HasForeignKey("IntakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.BaseClasses.Model.ValueObjects.CourseEvaluation", "StudentEvaluation")
                        .WithMany()
                        .HasForeignKey("StudentEvaluationId");

                    b.HasOne("Common.BaseClasses.Model.Student", "CurrentStudent")
                        .WithMany("StudentSubcriptions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.BaseClasses.Model.Teaching", b =>
                {
                    b.HasOne("Common.BaseClasses.Model.Instructor", "FullTimeInstructor")
                        .WithMany("InstructorTeachings")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.BaseClasses.Model.CourseIntake", "Intake")
                        .WithMany("TeachingInstructors")
                        .HasForeignKey("IntakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.BaseClasses.Model.Employee", b =>
                {
                    b.HasOne("Common.BaseClasses.Model.Department", "MainDepartment")
                        .WithMany("Employees")
                        .HasForeignKey("MainDepartmentDepartmentId");
                });
#pragma warning restore 612, 618
        }
    }
}
